package me.eddie.blackboardDownloader.main;

import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;
import com.google.api.client.auth.oauth2.BearerToken;
import com.google.api.client.auth.oauth2.ClientParametersAuthentication;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;

import java.io.File;
import java.util.Arrays;

public class APIAuthtest {
    private static final File DATA_STORE_DIR = new File("files/authDataStoreDir");
    private static FileDataStoreFactory DATA_STORE_FACTORY;
    private static final String SCOPE = "read";
    private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();
    public static final JsonFactory JSON_FACTORY = new JacksonFactory();
    private static final String BLACKBOARD_URL = "https://bb.imperial.ac.uk";
    private static final String TOKEN_SERVER_URL = BLACKBOARD_URL+"/learn/api/public/v1/oauth2/token";
    private static final String AUTHORIZATION_SERVER_URL = BLACKBOARD_URL+"/learn/api/public/v1/oauth2/authorizationcode";
    private static final String API_KEY = "9ccba951-80ce-444a-b783-b811dd6ea41d";
    private static final String API_SECRET = "oe7EVd77PV4LYPQSLp6WUP0s3H1KOPCb";


    private static Credential authorize() throws Exception {
        AuthorizationCodeFlow flow = new AuthorizationCodeFlow.Builder(
                BearerToken.queryParameterAccessMethod()/*.authorizationHeaderAccessMethod()*/,
                HTTP_TRANSPORT,
                JSON_FACTORY,
                new GenericUrl(TOKEN_SERVER_URL),
                new ClientParametersAuthentication(API_KEY, API_SECRET),
                API_KEY,
                AUTHORIZATION_SERVER_URL
        ).setScopes(Arrays.asList(SCOPE))
                .setDataStoreFactory(DATA_STORE_FACTORY)
                .build();
        // authorize
        LocalServerReceiver receiver =
                new LocalServerReceiver.Builder()
                        .setHost("127.0.0.1")
                        .setPort(8080)
                        .build();
        return new AuthorizationCodeInstalledApp(flow, receiver).authorize("user");
    }

    public static void main(String[] args){
        try {
            DATA_STORE_FACTORY = new FileDataStoreFactory(DATA_STORE_DIR);
            final Credential credential = authorize();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
